version: '3.8'

services:

  postgres-user-db:
    image: postgres:16
    env_file:
      - ./microservices/user-service/.env
    volumes:
      - ./microservices/user-service/init_scripts/01_ddl.sql:/docker-entrypoint-initdb.d/01_ddl.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 2s
      retries: 10

  postgres-exercise-db:
    image: postgres:16
    env_file:
      - ./microservices/exercise-service/.env
    volumes:
      - ./microservices/exercise-service/init_scripts/01_ddl.sql:/docker-entrypoint-initdb.d/01_ddl.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 10

  postgres-workout-db:
    image: postgres:16
    env_file:
      - ./microservices/workout-service/.env
    volumes:
      - ./microservices/workout-service/init_scripts/01_ddl.sql:/docker-entrypoint-initdb.d/01_ddl.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -d $${POSTGRES_DB} -U $${POSTGRES_USER}" ]
      interval: 5s
      timeout: 10s
      retries: 10

  auth-server:
    build: microservices/authorization-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: [ "CMD", "curl", "-fs", "http://localhost:9999/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 10

  api-gateway:
    build: microservices/api-gateway
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    healthcheck:
      test: [ "CMD", "curl", "-fs", "http://localhost:8443/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 10

  user-service:
    build: microservices/user-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      postgres-user-db:
        condition: service_healthy
    healthcheck:
      test: [ "CMD", "curl", "-fs", "http://localhost:8080/actuator/health" ]
      interval: 5s
      timeout: 2s
      retries: 10

  exercise-service:
    build: microservices/exercise-service
    depends_on:
      postgres-exercise-db:
        condition: service_healthy

  workout-service:
    build: microservices/workout-service
    depends_on:
      postgres-workout-db:
        condition: service_healthy

  analytics-service:
    build: microservices/analytics-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker

  frontend:
    build: microservices/frontend/FE_Fitness_Tracker
    ports:
      - "80:80"
    healthcheck:
      test: [ "CMD-SHELL", "curl -fs http://localhost:80" ]
      interval: 5s
      timeout: 2s
      retries: 10
    depends_on:
      postgres-user-db:
        condition: service_healthy
